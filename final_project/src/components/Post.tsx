import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export default function Post() {
  const [previewImages, setPreviewImages] = useState<string[]>([]);
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [price, setPrice] = useState("");
  const [daily, setDaily] = useState("");
  const [phone, setPhone] = useState("");
  const [details, setDetails] = useState("");
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const navigate = useNavigate(); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ preview ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files) {
      const newPreviews = Array.from(files).map((file) =>
        URL.createObjectURL(file)
      );
      setPreviewImages([...previewImages, ...newPreviews]);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å LocalStorage ‡∏´‡∏£‡∏∑‡∏≠ Cookie)
    const token = localStorage.getItem("token");
    if (!token) {
      setErrorMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®");
      return;
    }

    const data = {
      name,
      address,
      price,
      daily,
      phone,
      images: previewImages, // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
      details: details.split("\n"), // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô array
    };

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Backend API
      const response = await axios.post(
        "http://localhost:3000/apartments", // URL ‡∏Ç‡∏≠‡∏á Backend API
        data,
        {
          headers: {
            Authorization: `Bearer ${token}`, // ‡∏™‡πà‡∏á Token ‡πÉ‡∏ô Header
          },
        }
      );
      // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
      navigate("/success"); // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    } catch (error) {
      console.error("Error posting apartment data:", error);
      setErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®");
    }
  };

  return (
    <div className="pt-24 p-10 text-center min-h-screen bg-gray-50">
      <h1 className="text-3xl font-bold text-blue-700 mb-6">
        üì¢ ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏´‡∏≠‡∏û‡∏±‡∏Å
      </h1>
      <p className="text-gray-700 text-lg mb-10">
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
        ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
      </p>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô */}
      {errorMessage && (
        <div className="mb-6 text-red-600 font-semibold">{errorMessage}</div>
      )}

      <form
        className="max-w-3xl mx-auto bg-white shadow-md rounded-xl p-8 text-left"
        onSubmit={handleSubmit}
      >
        {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å */}
        <div className="mb-5">
          <label className="block text-gray-700 mb-2 font-semibold">
            ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡∏û‡∏±‡∏Å
          </label>
          <input
            type="text"
            className="w-full border border-gray-300 rounded-lg p-3 focus:outline-blue-400"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡πÉ‡∏à ‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>

        {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
        <div className="mb-5">
          <label className="block text-gray-700 mb-2 font-semibold">
            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </label>
          <textarea
            className="w-full border border-gray-300 rounded-lg p-3 focus:outline-blue-400"
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏ó‡∏≥‡πÄ‡∏• ‡∏Ø‡∏•‡∏Ø"
            rows={4}
            value={details}
            onChange={(e) => setDetails(e.target.value)}
          />
        </div>

        {/* ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
        <div className="mb-5">
          <label className="block text-gray-700 mb-2 font-semibold">
            ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
          </label>
          <input
            type="number"
            className="w-full border border-gray-300 rounded-lg p-3 focus:outline-blue-400"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 4500"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
          />
        </div>

        {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ */}
        <div className="mb-8">
          <label className="block text-gray-700 mb-2 font-semibold">
            ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏≠‡∏û‡∏±‡∏Å
          </label>

          <input
            type="file"
            multiple
            accept="image/*"
            onChange={handleImageUpload}
            className="block w-full text-sm text-gray-600
                       file:mr-4 file:py-2 file:px-4
                       file:rounded-lg file:border-0
                       file:text-sm file:font-semibold
                       file:bg-blue-600 file:text-white
                       hover:file:bg-blue-700 cursor-pointer"
          />

          {/* ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏π‡∏õ */}
          {previewImages.length > 0 && (
            <div className="mt-5 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
              {previewImages.map((src, index) => (
                <div
                  key={index}
                  className="relative border rounded-lg overflow-hidden"
                >
                  <img
                    src={src}
                    alt={`preview-${index}`}
                    className="object-cover w-full h-40"
                  />
                  <button
                    type="button"
                    onClick={() =>
                      setPreviewImages(
                        previewImages.filter((_, i) => i !== index)
                      )
                    }
                    className="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 text-sm flex items-center justify-center hover:bg-red-600"
                  >
                    √ó
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® */}
        <button
          type="submit"
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition"
        >
          ‚úÖ ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
        </button>
      </form>
    </div>
  );
}
